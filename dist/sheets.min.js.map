{"version":3,"sources":["webpack://sheets/webpack/bootstrap","webpack://sheets/./src/Context.js","webpack://sheets/./src/ScreenComponent.js","webpack://sheets/./src/RowHeader.js","webpack://sheets/./src/constants.js","webpack://sheets/./src/util.js","webpack://sheets/./src/Cell.js","webpack://sheets/./src/Row.js","webpack://sheets/./src/ColumnHeader.js","webpack://sheets/./src/ColumnHeaderRow.js","webpack://sheets/./src/Sheet.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","src_Context","[object Object]","target","options","assign","onMouseMove","x","y","onMouseDown","onMouseUp","onMouseClick","onScroll","dx","dy","width","height","style","this","ctx","getContext","scale","self","getMouseCoords","e","rect","canvas","getBoundingClientRect","clientX","left","clientY","top","onmousemove","coords","preventDefault","onmousedown","onmouseup","onclick","onmousewheel","deltaX","deltaY","points","color","cap","lineJoin","beginPath","moveTo","length","lineTo","lineWidth","strokeStyle","lineCap","stroke","borderWidth","borderColor","undefined","fillColor","fillStyle","fill","text","font","align","baseLine","textAlign","textBaseline","fillText","img","drawImage","clearRect","src_ScreenComponent","sheet","scrollX","scrollY","canvasX","canvasY","src_RowHeader","index","rowIndex","super","backGroundColor","textBufferCanvas","document","createElement","textBufferContext","updateText","context","drawRect","ROW_HEADER_WIDTH","CELL_WIDTH","CELL_HEIGHT","alpha","iToA","current","a","Math","floor","aToI","indexOf","pow","src_Cell","dependentCells","cell","push","getIndividualArgValue","arg","test","colAlpha","colAlphaMatch","col","row","match","getCell","functionName","substr","split","args","replace","argValues","trim","rangeIndexes","j","result","formulajs","apply","isTextBufferInitialized","isNumeric","repaint","clear","isSelected","drawText","isEditing","inputElement","blur","hide","show","css","focus","updateValue","val","remove","startMultiSelect","updateSelection","isMultiSelecting","multiSelectSize","edit","clearMultiSelect","endMultiSelect","deselectAllCells","$","type","id","append","dirty","keydown","keyCode","which","rows","shiftKey","cells","keyup","originalEvent","clipboardData","getData","src_Row","colCount","rowHeader","cellX","isVisibleOnScreen","draw","colIndex","newWidth","oldWidth","isCollision","mouseDown","mouseMove","mouseUp","mouseClick","minColIndex","maxColIndex","src_ColumnHeader","src_ColumnHeaderRow","columnHeaders","headerX","columnHeader","isResizing","xDelta","resizeStartX","resizeCol","resizeHeader","resizeStartWidth","body","cursor","__webpack_exports__","Sheet","selectMinRowIndex","selectMaxRowIndex","selectMinColIndex","selectMaxColIndex","rowCount","scroll","columnHeaderRow","rowY","mainLoop","requestAnimationFrame","showMultiSelect","minRow","delta"],"mappings":"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","file":"sheets.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\nclass Context {\n  constructor(target, options) {\n    options = Object.assign({\n      onMouseMove: (x, y) => {},\n      onMouseDown: (x, y) => {},\n      onMouseUp: (x, y) => {},\n      onMouseClick: (x, y) => {},\n      onScroll: (dx, dy) => {}\n    }, options);\n\n    target.width = options.width * 2;\n    target.height = options.height * 2;\n    target.style.width = options.width + \"px\";\n    target.style.height = options.height + \"px\";\n\n    this.ctx = target.getContext(\"2d\");\n    this.ctx.scale(2, 2);\n\n    var self = this;\n\n    const getMouseCoords = function (e) {\n  \t\tvar rect = self.ctx.canvas.getBoundingClientRect();\n\n  \t\treturn {\n  \t\t\tx: e.clientX - rect.left,\n  \t\t\ty: e.clientY - rect.top\n  \t\t};\n  \t};\n\n    this.ctx.canvas.onmousemove = function(e) {\n      var coords = getMouseCoords(e);\n    \toptions.onMouseMove(coords.x, coords.y);\n      e.preventDefault();\n    };\n\n    this.ctx.canvas.onmousedown = function (e) {\n    \tvar coords = getMouseCoords(e);\n    \toptions.onMouseDown(coords.x, coords.y);\n      e.preventDefault();\n    };\n\n    this.ctx.canvas.onmouseup = function (e) {\n    \tvar coords = getMouseCoords(e);\n    \toptions.onMouseUp(coords.x, coords.y);\n      e.preventDefault();\n    };\n\n    this.ctx.canvas.onclick = function (e) {\n    \tvar coords = getMouseCoords(e);\n    \toptions.onMouseClick(coords.x, coords.y);\n      e.preventDefault();\n    };\n\n    this.ctx.canvas.onmousewheel = function(e) {\n      options.onScroll(e.deltaX, e.deltaY);\n      e.preventDefault();\n    };\n\n    // this.textBufferCanvas = document.createElement('canvas');\n    // this.textBufferContext = this.textBufferCanvas.getContext('2d');\n  }\n\n  drawLine(points, options) {\n    options = Object.assign({\n      width: 1,\n      color: 'black',\n      cap: 'square',\n      lineJoin: 'miter'\n    }, options);\n\n    this.ctx.beginPath();\n    this.ctx.moveTo(points[0][0], points[0][1]);\n    for(let i = 1; i < points.length; i++) {\n      this.ctx.lineTo(points[i][0], points[i][1]);\n    }\n    this.ctx.lineWidth = options.width;\n    this.ctx.strokeStyle = options.color;\n    this.ctx.lineCap = options.cap;\n    this.ctx.lineJoin = options.lineJoin;\n    this.ctx.stroke();\n  }\n\n  drawRect(x, y, width, height, options) {\n    options = Object.assign({\n      borderWidth: 1,\n      borderColor: undefined,\n      fillColor: undefined\n    }, options);\n\n    this.ctx.beginPath();\n\n    if(options.fillColor) {\n      this.ctx.fillStyle = options.fillColor;\n    }\n\n    if(options.borderColor) {\n      this.ctx.lineWidth = options.borderWidth;\n      this.ctx.strokeStyle = options.borderColor;\n    }\n\n    this.ctx.rect(x, y, width, height);\n\n    if(options.fillColor) {\n      this.ctx.fill();\n    }\n\n    if(options.borderColor) {\n      this.ctx.stroke();\n    }\n  }\n\n  drawText(text, x, y, options) {\n    options = Object.assign({\n      font: '14px Sans',\n      color: 'white',\n      align: 'center',\n      baseLine: 'middle'\n    }, options);\n\n    this.ctx.font = options.font;\n    this.ctx.fillStyle = options.color;\n    this.ctx.textAlign = options.align;\n    this.ctx.textBaseline = options.baseLine;\n\n    this.ctx.fillText(text, x, y);\n  }\n\n  drawImage(img, x, y, width, height) {\n    this.ctx.drawImage(img, x, y, width, height);\n  }\n\n  clear() {\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n  }\n}\n\nexport default Context;\n","class ScreenComponent {\n  constructor(sheet, x, y, width, height) {\n    this.sheet = sheet;\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  draw() {\n    // console.log(\"ScreenComponent:draw()\");\n  }\n\n  isVisibleOnScreen() {\n    return !(this.x + this.sheet.scrollX + this.width < 0 || this.x + this.sheet.scrollX > this.sheet.width ||\n      this.y + this.sheet.scrollY + this.height < 0 || this.y + this.sheet.scrollY > this.sheet.height);\n  }\n\n  isCollision(canvasX, canvasY) {\n    return canvasX > this.x + this.sheet.scrollX &&\n      canvasX < this.x + this.sheet.scrollX + this.width &&\n      canvasY > this.y + this.sheet.scrollY &&\n      canvasY < this.y + this.sheet.scrollY + this.height;\n  }\n}\n\nexport default ScreenComponent;\n","import ScreenComponent from './ScreenComponent';\n\nclass RowHeader extends ScreenComponent {\n  constructor(index, rowIndex, sheet, x, y, width, height, options) {\n    super(sheet, x, y, width, height, options);\n\n    this.rowIndex = rowIndex;\n\n    Object.assign(this, {\n      color: 'black',\n      backGroundColor: 'lightGray',\n      borderColor: 'darkGray',\n      borderWidth: 1\n    }, options);\n\n    this.textBufferCanvas = document.createElement('canvas');\n    this.textBufferContext = this.textBufferCanvas.getContext('2d');\n\n    this.textBufferCanvas.width = this.width * 2;\n    this.textBufferCanvas.height = this.height * 2;\n    this.textBufferCanvas.style.width = this.width;\n    this.textBufferCanvas.style.height = this.height;\n\n    this.textBufferContext.scale(2, 2);\n\n    this.textBufferContext.font = this.height * 0.8  + 'px Sans';\n    this.textBufferContext.fillStyle = this.color;\n    this.textBufferContext.textAlign = 'center';\n    this.textBufferContext.textBaseline = 'middle';\n\n    this.updateText(rowIndex + 1);\n  }\n\n  updateText(text) {\n    this.text = text;\n    this.textBufferContext.fillText(this.text, this.width / 2, this.height / 2);\n  }\n\n  draw() {\n    this.sheet.context.drawRect(this.x, this.sheet.scrollY + this.y, this.width, this.height, {\n      fillColor: this.backGroundColor,\n      borderColor: this.borderColor,\n      borderWidth: this.borderWidth\n    });\n\n    this.sheet.context.drawImage(this.textBufferCanvas, this.x, this.y + this.sheet.scrollY, this.width, this.height);\n  }\n}\n\nexport default RowHeader;\n","export const ROW_HEADER_WIDTH = 40;\nexport const CELL_WIDTH = 70;\nexport const CELL_HEIGHT = 20;\n","const alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; //0 = A, 25 = Z\n\nexport const iToA = (i) => {\n  let current = i;\n\n  let a = \"\";\n\n  while(current > -1) {\n    let digit = current % 26;\n    a = alpha[digit] + \"\" + a;\n\n    //This is not a straight number base conversion, we need to\n    //treat A as\n    current = Math.floor(current / 26) - 1;\n  }\n\n  return a;\n}\n\nexport const aToI = (a) => {\n  let index = (alpha.indexOf(a[0]) + 1) * Math.pow(26, a.length - 1) - 1;\n\n  for(let i = a.length - 1; i > 0; i--) {\n    index += (alpha.indexOf(a[i]) + 1) * Math.pow(26, a.length - i - 1);\n  }\n\n  return index;\n};\n","import ScreenComponent from './ScreenComponent';\nimport Context from './Context';\nimport {ROW_HEADER_WIDTH} from './constants';\nimport {aToI} from './util';\n\nclass Cell extends ScreenComponent {\n  constructor(index, rowIndex, sheet, x, y, width, height, options) {\n    super(sheet, x, y, width, height);\n\n    this.index = index;\n    this.rowIndex = rowIndex;\n    this.text = \"\";\n\n    Object.assign(this, {\n      color: 'black',\n      backGroundColor: 'white',\n      borderColor: 'darkGray',\n      borderWidth: 1\n    }, options);\n\n    this.dependentCells = [];\n  }\n\n  registerDependentValueCell(cell) {\n    this.dependentCells.push(cell);\n  }\n\n  updateValue(value) {\n    this.value = value;\n\n    //TODO: Should nulls be displayed the same as undefined (i.e. blank)?\n    if(value === undefined || value === null) {\n      return;\n    }\n\n    const getIndividualArgValue = (arg) => {\n      // let colAlphaMatch = arg.match(/[A-Z]+/);\n\n      if(/[A-Z]+/.test(arg)) {\n        //Cell reference\n        let colAlpha = colAlphaMatch[0];\n        let col = aToI(colAlpha);\n        let row = arg.match(/\\d+/)[0] - 1;\n\n        let cell = this.sheet.getCell(row, col);\n\n        return cell.value;\n      }\n      else {\n        //Number literal (we assume)\n        return arg;\n      }\n    };\n\n    if(value.indexOf(\"=\") == 0) {\n      let functionName = value.substr(1).split('(')[0];\n      let args = value.substr(1).split('(')[1].replace(')', '').split(',');\n\n      let argValues = [];\n\n      for(let i = 0; i < args.length; i++) {\n        let arg = args[i].trim();\n\n        if(arg.indexOf(\":\") !== -1) {\n          let rangeIndexes = arg.split(':');\n\n          //TODO: This is not actually a range right now\n          for(let j = 0; j < rangeIndexes.length; j++) {\n            argValues.push(getIndividualArgValue(rangeIndexes[j]));\n          }\n        }\n        else {\n          argValues.push(getIndividualArgValue(arg));\n        }\n      }\n\n      let result = formulajs[functionName].apply(null, argValues);\n\n      this.text = result;\n    }\n    else {\n      this.text = value;\n    }\n\n    if(!this.isTextBufferInitialized) {\n      this.textBufferCanvas = document.createElement('canvas');\n\n      this.textBufferContext = new Context(this.textBufferCanvas, {\n        width: this.width,\n        height: this.height\n      });\n\n      this.isTextBufferInitialized = true;\n    }\n\n    this.isNumeric = this.text && /^\\d*(\\.\\d+)?$/.test(this.text);\n\n    this.repaint();\n  }\n\n  repaint() {\n    if(this.isTextBufferInitialized) {\n      this.textBufferContext = new Context(this.textBufferCanvas, {\n        width: this.width,\n        height: this.height\n      });\n\n      this.textBufferContext.clear();\n\n      this.textBufferContext.drawRect(0, 0, this.width, this.height, {\n        fillColor: this.isSelected ? '#c9e2f9' : this.backGroundColor,\n        borderColor: this.borderColor,\n        borderWidth: this.borderWidth\n      });\n\n      //TODO: Formatting\n\n      this.textBufferContext.drawText(this.text, this.isNumeric ? this.width : 0, this.height / 2, {\n        font: this.height * 0.8 + 'px Sans',\n        color: this.color,\n        align: this.isNumeric ? 'end' : 'start',\n        baseLine: 'middle'\n      });\n    }\n\n    if(this.isEditing) {\n      if(this.width > 4) {\n        this.inputElement.width(this.width - 4);\n      }\n      else {\n        this.blur();\n      }\n    }\n  }\n\n  draw() {\n    if(!this.isTextBufferInitialized) {\n      this.sheet.context.drawRect(this.sheet.scrollX + this.x, this.sheet.scrollY + this.y, this.width, this.height, {\n        fillColor: this.isSelected ? '#c9e2f9' : this.backGroundColor,\n        borderColor: this.borderColor,\n        borderWidth: this.borderWidth\n      });\n    }\n    else {\n      this.sheet.context.drawImage(this.textBufferCanvas, this.x + this.sheet.scrollX, this.y + this.sheet.scrollY, this.width, this.height);\n    }\n\n    if(this.isEditing) {\n      if(this.sheet.scrollX + this.x < ROW_HEADER_WIDTH || this.sheet.scrollX + this.x > this.sheet.width - this.width || this.sheet.scrollY + this.y < 20 || this.sheet.scrollY + this.y > this.sheet.height - this.height) {\n        this.inputElement.hide();\n      }\n      else {\n        this.inputElement.show();\n        this.inputElement.css(\"left\", this.sheet.scrollX + this.x + \"px\");\n        this.inputElement.css(\"top\", this.sheet.scrollY + this.y + \"px\");\n        this.inputElement.focus();\n      }\n    }\n  }\n\n  blur() {\n    this.isSelected = false;\n\n    if(this.isEditing) {\n      this.isEditing = false;\n      this.updateValue(this.inputElement.val());\n      this.inputElement.remove();\n      this.inputElement = undefined;\n    }\n  }\n\n  mouseDown(x, y) {\n    this.sheet.startMultiSelect();\n    this.sheet.updateSelection(this.rowIndex, this.index);\n  }\n\n  mouseMove(x, y) {\n    if(this.sheet.isMultiSelecting) {\n      this.sheet.updateSelection(this.rowIndex, this.index);\n    }\n  }\n\n  mouseUp(x, y) {\n    if(this.sheet.multiSelectSize() == 1) {\n      this.edit();\n      this.sheet.clearMultiSelect();\n    }\n\n    this.sheet.endMultiSelect();\n  }\n\n  mouseClick(x, y) {\n\n  }\n\n  edit() {\n    this.sheet.deselectAllCells();\n\n    this.isEditing = true;\n    this.inputElement = $(\"<input>\", {\n      type: \"text\",\n      id: \"cell-input\",\n      style:\n        \"text-align: \" + (this.isNumeric ? \"right\" : \"left\") + \";\" +\n        \"position: fixed;\" +\n        \"left: \" + this.sheet.scrollX + this.x + \"px;\" +\n        \"top: \" + this.sheet.scrollY + this.y + \"px;\" +\n        \"width: \" + (this.width - 4) + \"px; height: \" + (this.height - 4) + \"px;\"\n    });\n\n    $(\"body\").append(this.inputElement);\n\n    let dirty = false;\n\n    this.inputElement.val(this.value);\n\n    this.inputElement.keydown((e) => {\n      let keyCode = e.keyCode || e.which;\n\n      //TODO: auto scroll if moving to cell would make the input disappear\n\n      if(keyCode === 13) {\n        //Enter, go to next row\n        this.sheet.rows[this.rowIndex + (e.shiftKey ? -1 : 1)].cells[this.index].edit();\n      }\n      else if(keyCode === 9) {\n        //Tab, go to next column\n        this.sheet.rows[this.rowIndex].cells[this.index + (e.shiftKey ? -1 : 1)].edit();\n        e.preventDefault();\n      }\n      else if(keyCode === 37) {\n        //Left arrow\n        if(!dirty) {\n          this.sheet.rows[this.rowIndex].cells[this.index - 1].edit();\n        }\n      }\n      else if(keyCode === 39) {\n        //Right arrow\n        if(!dirty) {\n          this.sheet.rows[this.rowIndex].cells[this.index + 1].edit();\n        }\n      }\n      else if(keyCode === 38) {\n        //Up arrow\n        this.sheet.rows[this.rowIndex - 1].cells[this.index].edit();\n      }\n      else if(keyCode === 40) {\n        //Down arrow\n        this.sheet.rows[this.rowIndex + 1].cells[this.index].edit();\n      }\n      else if((keyCode === 46 /* Delete */ || keyCode === 8 /* Backspace */) && !dirty) {\n        this.inputElement.val(undefined);\n        this.updateValue(undefined);\n      }\n    });\n\n    this.inputElement.keyup((e) => {\n      let keyCode = e.keyCode || e.which;\n\n      if(keyCode !== 13 && keyCode !== 9 && keyCode !== 37 && keyCode !== 39 && keyCode !== 38 && keyCode !== 40) {\n        dirty = true;\n\n        this.updateValue(this.inputElement.val());\n\n        if(this.isNumeric) {\n          this.inputElement.css(\"text-align\", this.isNumeric ? \"right\" : \"left\")\n        }\n      }\n    });\n\n    this.inputElement.bind('paste', (e) => {\n      var pastedData = e.originalEvent.clipboardData.getData('text');\n\n    });\n\n    this.inputElement.focus();\n  }\n}\n\nexport default Cell;\n","import ScreenComponent from './ScreenComponent';\nimport RowHeader from './RowHeader';\nimport Cell from './Cell';\nimport {CELL_WIDTH, CELL_HEIGHT, ROW_HEADER_WIDTH} from './constants';\n\nclass Row extends ScreenComponent {\n  constructor(index, sheet, x, y, colCount, options) {\n    //TODO: Calculate width, also update width on column resize\n    //TODO: Pass in width and height as options\n    super(sheet, x, y, ROW_HEADER_WIDTH + colCount * CELL_WIDTH, CELL_HEIGHT);\n\n    this.index = index;\n\n    //Header cell\n    this.rowHeader = new RowHeader(0, index, sheet, 0, this.y, ROW_HEADER_WIDTH, CELL_HEIGHT, {\n      color: 'black',\n      backGroundColor: 'lightGray',\n      borderColor: 'black',\n      borderWidth: 1\n    });\n\n    //Data cells\n    this.cells = [];\n\n    let cellX = ROW_HEADER_WIDTH;\n\n    for(let i = 0; i < colCount; i++) {\n      this.cells.push(new Cell(i, index, sheet, cellX, this.y, CELL_WIDTH, CELL_HEIGHT, options));\n      cellX += CELL_WIDTH;\n    }\n  }\n\n  draw() {\n    for(let i = 0; i < this.cells.length; i++) {\n      const cell = this.cells[i];\n\n      if(cell.isVisibleOnScreen()) {\n        cell.draw();\n      }\n    }\n\n    this.rowHeader.draw();\n  }\n\n  resizeCol(colIndex, newWidth) {\n    let cell = this.cells[colIndex]\n    let oldWidth = cell.width;\n\n    cell.width = newWidth;\n    cell.repaint();\n\n    for(let i = colIndex + 1; i < this.cells.length; i++) {\n      this.cells[i].x += (newWidth - oldWidth);\n    }\n  }\n\n  mouseDown(x, y) {\n    for(let i = 0; i < this.cells.length; i++) {\n      if(this.cells[i].isCollision(x, y)) {\n        this.cells[i].mouseDown(x, y);\n      }\n    }\n  }\n\n  mouseMove(x, y) {\n    for(let i = 0; i < this.cells.length; i++) {\n      if(this.cells[i].isCollision(x, y)) {\n        this.cells[i].mouseMove(x, y);\n      }\n    }\n  }\n\n  mouseUp(x, y) {\n    for(let i = 0; i < this.cells.length; i++) {\n      if(this.cells[i].isCollision(x, y)) {\n        this.cells[i].mouseUp(x, y);\n      }\n    }\n  }\n\n  mouseClick(x, y) {\n    for(let i = 0; i < this.cells.length; i++) {\n      if(this.cells[i].isCollision(x, y)) {\n        this.cells[i].mouseClick(x, y);\n      }\n    }\n  }\n\n  deselectAllCells() {\n    for(let i = 0; i < this.cells.length; i++) {\n      this.cells[i].blur();\n    }\n  }\n\n  updateSelection(minColIndex, maxColIndex) {\n    for(let i = minColIndex; i <= maxColIndex; i++) {\n      this.cells[i].isSelected = true;\n    }\n  }\n\n  getCell(colIndex) {\n    return this.cells[colIndex];\n  }\n}\n\nexport default Row;\n","import ScreenComponent from './ScreenComponent';\nimport {iToA} from './util';\n\nclass ColumnHeader extends ScreenComponent {\n  constructor(index, sheet, x, y, width, height, options) {\n    super(sheet, x, y, width, height, options);\n\n    this.index = index;\n\n    Object.assign(this, {\n      color: 'black',\n      backGroundColor: 'lightGray',\n      borderColor: 'darkGray',\n      borderWidth: 1\n    }, options);\n\n    this.updateText(iToA(this.index));\n  }\n\n  isVisibleOnScreen() {\n    return !(this.x + this.sheet.scrollX + this.width < 0 || this.x + this.sheet.scrollX > this.sheet.width ||\n      this.y + this.height < 0 || this.y  > this.sheet.height);\n  }\n\n  updateText(value) {\n    this.text = value;\n\n    this.repaint();\n  }\n\n  repaint() {\n    this.textBufferCanvas = document.createElement('canvas');\n    this.textBufferContext = this.textBufferCanvas.getContext('2d');\n\n    this.textBufferCanvas.width = this.width * 2;\n    this.textBufferCanvas.height = this.height * 2;\n    this.textBufferCanvas.style.width = this.width;\n    this.textBufferCanvas.style.height = this.height;\n\n    this.textBufferContext.scale(2, 2);\n\n    this.textBufferContext.font = this.height * 0.8 + 'px Sans';\n    this.textBufferContext.fillStyle = this.color;\n    this.textBufferContext.textAlign = 'center';\n    this.textBufferContext.textBaseline = 'middle';\n\n    this.textBufferContext.fillText(this.text, this.width / 2, this.height / 2);\n  }\n\n  draw() {\n    this.sheet.context.drawRect(this.x + this.sheet.scrollX, this.y, this.width, this.height, {\n      fillColor: this.backGroundColor,\n      borderColor: this.borderColor,\n      borderWidth: this.borderWidth\n    });\n\n    this.sheet.context.drawImage(this.textBufferCanvas, this.x + this.sheet.scrollX, this.y, this.width, this.height);\n  }\n}\n\nexport default ColumnHeader;\n","import ScreenComponent from './ScreenComponent';\nimport ColumnHeader from './ColumnHeader';\nimport {CELL_WIDTH, CELL_HEIGHT, ROW_HEADER_WIDTH} from './constants';\n\nclass ColumnHeaderRow extends ScreenComponent {\n  constructor(sheet, x, y, colCount, options) {\n    super(sheet, x, y, ROW_HEADER_WIDTH + colCount * CELL_WIDTH, CELL_HEIGHT);\n\n    this.columnHeaders = [];\n\n    let headerX = ROW_HEADER_WIDTH;\n\n    for(let i = 0; i < colCount; i++) {\n      this.columnHeaders.push(new ColumnHeader(i, sheet, headerX, this.y, CELL_WIDTH, CELL_HEIGHT, {\n        color: 'black',\n        backGroundColor: 'lightGray',\n        borderColor: 'black',\n        borderWidth: 1\n      }));\n\n      headerX += CELL_WIDTH;\n    }\n  }\n\n  draw() {\n    for(let i = 0; i < this.columnHeaders.length; i++) {\n      const columnHeader = this.columnHeaders[i];\n\n      if(columnHeader.isVisibleOnScreen()) {\n        columnHeader.draw();\n      }\n    }\n  }\n\n  resizeCol(colIndex, newWidth) {\n    let columnHeader = this.columnHeaders[colIndex];\n    let oldWidth = columnHeader.width;\n\n    columnHeader.width = newWidth;\n    columnHeader.repaint();\n\n    for(let i = colIndex + 1; i < this.columnHeaders.length; i++) {\n      this.columnHeaders[i].x += (newWidth - oldWidth);\n    }\n  }\n\n  mouseMove(x, y) {\n    if(this.isResizing) {\n      let xDelta = x - this.resizeStartX;\n\n      this.sheet.resizeCol(this.resizeHeader.index, this.resizeStartWidth + xDelta);\n    }\n    else {\n      for(let i = 0; i < this.columnHeaders.length; i++) {\n        let columnHeader = this.columnHeaders[i];\n\n        if(x > columnHeader.x + this.sheet.scrollX + columnHeader.width - 5 && x < columnHeader.x + this.sheet.scrollX + columnHeader.width + 5) {\n          document.body.style.cursor = 'col-resize';\n          this.resizeHeader = columnHeader;\n        }\n      }\n    }\n  }\n\n  mouseDown(x, y) {\n    if(this.resizeHeader) {\n      this.resizeStartX = x;\n      this.resizeStartWidth = this.resizeHeader.width;\n      this.isResizing = true;\n    }\n  }\n\n  mouseUp(x, y) {\n    this.resizeHeader = undefined;\n    this.isResizing = false;\n  }\n\n  mouseClick(x, y) {\n    for(let i = 0; i < this.columnHeaders.length; i++) {\n      if(this.columnHeaders[i].isCollision(x, y)) {\n        this.columnHeaders[i].mouseClick(x, y);\n      }\n    }\n  }\n}\n\nexport default ColumnHeaderRow;\n","import Context from './Context';\nimport Row from './Row';\nimport ColumnHeaderRow from './ColumnHeaderRow';\nimport {CELL_WIDTH, CELL_HEIGHT, ROW_HEADER_WIDTH} from './constants';\n\nclass Sheet {\n  constructor(target, options) {\n    this.scrollY = 0;\n    this.scrollX = 0;\n\n    this.selectMinRowIndex = -1;\n    this.selectMaxRowIndex = -1;\n    this.selectMinColIndex = -1;\n    this.selectMaxColIndex = -1;\n\n    Object.assign(this, {\n      width: undefined,\n      height: undefined,\n      rowCount: 2000,\n      colCount: 200,\n    }, options);\n\n    this.context = new Context(target, {\n        onMouseMove: this.mouseMove.bind(this),\n        onMouseDown: this.mouseDown.bind(this),\n        onMouseUp: this.mouseUp.bind(this),\n        onMouseClick: this.mouseClick.bind(this),\n        onScroll: this.scroll.bind(this),\n        width: this.width,\n        height: this.height\n    });\n\n    //TODO: make target a div and have library create canvas element\n    //TODO: allow to fill size of div placed in\n\n    //Column headerX\n    this.columnHeaderRow = new ColumnHeaderRow(this, 0, 0, this.rowCount);\n\n    //Data rows\n    this.rows = [];\n\n    let rowY = CELL_HEIGHT;\n\n    for(let i = 0; i < this.rowCount; i++) {\n      this.rows.push(new Row(i, this, 0, rowY, this.colCount));\n      rowY += CELL_HEIGHT;\n    }\n\n    this.mainLoop();\n  }\n\n  mainLoop() {\n    this.draw();\n    requestAnimationFrame(this.mainLoop.bind(this));\n  }\n\n  mouseDown(x, y) {\n    if(this.columnHeaderRow.isCollision(x, y)) {\n      this.columnHeaderRow.mouseDown(x, y);\n    }\n    else {\n      for(let i = 0; i < this.rows.length; i++) {\n        if(this.rows[i].isCollision(x, y)) {\n          this.rows[i].mouseDown(x, y);\n        }\n      }\n    }\n  }\n\n  mouseMove(x, y) {\n    document.body.style.cursor = 'default';\n\n    if(this.columnHeaderRow.isCollision(x, y)) {\n      this.columnHeaderRow.mouseMove(x, y);\n    }\n    else {\n      for(let i = 0; i < this.rows.length; i++) {\n        if(this.rows[i].isCollision(x, y)) {\n          this.rows[i].mouseMove(x, y);\n        }\n      }\n    }\n  }\n\n  mouseUp(x, y) {\n    if(this.columnHeaderRow.isCollision(x, y)) {\n      this.columnHeaderRow.mouseUp(x, y);\n    }\n    else {\n      for(let i = 0; i < this.rows.length; i++) {\n        if(this.rows[i].isCollision(x, y)) {\n          this.rows[i].mouseUp(x, y);\n        }\n      }\n    }\n  }\n\n  mouseClick(x, y) {\n    for(let i = 0; i < this.rows.length; i++) {\n      if(this.rows[i].isCollision(x, y)) {\n        this.rows[i].mouseClick(x, y);\n      }\n    }\n  }\n\n  scroll(dx, dy) {\n    if(dy > 0) {\n      this.scrollY -= 5 * dy;\n    }\n    else if(dy < 0) {\n      if(this.scrollY <= -5 * -dy) {\n        this.scrollY -= 5 * dy;\n      }\n    }\n\n    if(dx > 0) {\n      this.scrollX -= 5 * dx;\n    }\n    else if(dx < 0) {\n      if(this.scrollX <= -5 * -dx) {\n        this.scrollX -= 5 * dx;\n      }\n    }\n  }\n\n  draw() {\n    //Background and border\n    this.context.drawRect(0, 0, this.width, this.height, {\n      borderColor: 'darkGray',\n      borderWidth: 3,\n      fillColor: 'lightGray'\n    });\n\n    //Header\n\n    //Rows\n    for(let i = 0; i < this.rows.length; i++) {\n      const row = this.rows[i];\n\n      if(row.isVisibleOnScreen()) {\n        this.rows[i].draw();\n      }\n    }\n\n    //Column headers\n    this.columnHeaderRow.draw();\n    this.context.drawRect(0, 0, ROW_HEADER_WIDTH, CELL_HEIGHT, {\n      borderColor: 'black',\n      borderWidth: 1,\n      fillColor: 'darkGray'\n    });\n\n    //Scroll bars\n\n    //Multiselect borderWidth\n    if(this.showMultiSelect) {\n      let minRow = this.rows[this.selectMinRowIndex];\n      let maxRow = this.rows[this.selectMaxRowIndex];\n\n      let x = minRow.cells[this.selectMinColIndex].x + this.scrollX;\n      let y = minRow.y + this.scrollY;\n\n      let width = 0;\n\n      for(let i = this.selectMinColIndex; i <= this.selectMaxColIndex; i++) {\n        width += minRow.cells[i].width;\n      }\n\n      let height = 0;\n\n      for(let i = this.selectMinRowIndex; i <= this.selectMaxRowIndex; i++) {\n        height += this.rows[i].height;\n      }\n\n      this.context.drawRect(x, y, width, height, {\n        borderColor: 'blue',\n        borderWidth: 2\n      });\n    }\n  }\n\n  resizeRow(rowIndex, delta) {\n    this.rows[rowIndex].height += delta;\n\n    for(let i = rowIndex + 1; i < this.rows.length; i++) {\n      this.rows[i].y += delta;\n    }\n  }\n\n  resizeCol(colIndex, newWidth) {\n    if(newWidth < 0) {\n      return;\n    }\n    \n    this.columnHeaderRow.resizeCol(colIndex, newWidth);\n\n    for(let i = 0; i < this.rows.length; i++) {\n      this.rows[i].resizeCol(colIndex, newWidth);\n    }\n  }\n\n  deselectAllCells() {\n    for(let i = 0; i < this.rows.length; i++) {\n      this.rows[i].deselectAllCells();\n    }\n  }\n\n  startMultiSelect() {\n    this.clearMultiSelect();\n    this.isMultiSelecting = true;\n    this.showMultiSelect = true;\n  }\n\n  endMultiSelect() {\n    this.isMultiSelecting = false;\n  }\n\n  clearMultiSelect() {\n    this.showMultiSelect = false;\n    this.selectMinRowIndex = -1;\n    this.selectMaxRowIndex = -1;\n    this.selectMinColIndex = -1;\n    this.selectMaxColIndex = -1;\n  }\n\n  multiSelectSize() {\n    return (this.selectMaxRowIndex - this.selectMinRowIndex + 1) * (this.selectMaxColIndex - this.selectMinColIndex + 1);\n  }\n\n  updateSelection(rowIndex, colIndex) {\n    if(this.isMultiSelecting) {\n      if(this.selectMinRowIndex == -1 || rowIndex < this.selectMinRowIndex) {\n        this.selectMinRowIndex = rowIndex;\n      }\n\n      if(this.selectMaxRowIndex == -1 || rowIndex > this.selectMaxRowIndex) {\n        this.selectMaxRowIndex = rowIndex;\n      }\n\n      if(this.selectMinColIndex == -1 || colIndex < this.selectMinColIndex) {\n        this.selectMinColIndex = colIndex;\n      }\n\n      if(this.selectMaxColIndex == -1 || colIndex > this.selectMaxColIndex) {\n        this.selectMaxColIndex = colIndex;\n      }\n\n      this.deselectAllCells();\n\n      for(let i = this.selectMinRowIndex; i <= this.selectMaxRowIndex; i++) {\n        this.rows[i].updateSelection(this.selectMinColIndex, this.selectMaxColIndex);\n      }\n    }\n  }\n\n  getCell(rowIndex, colIndex) {\n    return this.rows[rowIndex].getCell(colIndex);\n  }\n}\n\nexport default {\n  Sheet: Sheet\n};\n"],"sourceRoot":""}